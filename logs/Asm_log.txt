Function assembler_error lines_to_bytecode(command_string_processing*) begin
line = PUSH 0
arg  = 0
arg format = 2304
arg val = 0
arg error = 0
command = 2433
arg = 0
command_len = 4

line = PUSH 10
arg  = 10
arg format = 2304
arg val = 1000
arg error = 0
command = 2433
arg = 1000
command_len = 4

line = PUSH 116
arg  = 116
arg format = 2304
arg val = 11600
arg error = 0
command = 2433
arg = 11600
command_len = 4

line = PUSH 110
arg  = 110
arg format = 2304
arg val = 11000
arg error = 0
command = 2433
arg = 11000
command_len = 4

line = PUSH 105
arg  = 105
arg format = 2304
arg val = 10500
arg error = 0
command = 2433
arg = 10500
command_len = 4

line = PUSH 32
arg  = 32
arg format = 2304
arg val = 3200
arg error = 0
command = 2433
arg = 3200
command_len = 4

line = PUSH 114
arg  = 114
arg format = 2304
arg val = 11400
arg error = 0
command = 2433
arg = 11400
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 116
arg  = 116
arg format = 2304
arg val = 11600
arg error = 0
command = 2433
arg = 11600
command_len = 4

line = PUSH 110
arg  = 110
arg format = 2304
arg val = 11000
arg error = 0
command = 2433
arg = 11000
command_len = 4

line = PUSH 69
arg  = 69
arg format = 2304
arg val = 6900
arg error = 0
command = 2433
arg = 6900
command_len = 4

line = PUTS
command = 23

line = 
line = IN
command = 8

line = POP [0]
arg  = [0]
arg format = 1024
arg val = 0
arg error = 0
command = 1161
arg = 0
command_len = 3

line = PUSH 1
arg  = 1
arg format = 2304
arg val = 100
arg error = 0
command = 2433
arg = 100
command_len = 4

line = POP AX
arg  = AX
arg format = 512
arg val = 1
arg error = 0
command = 649
arg = 1
command_len = 3

line = PUSH 1
arg  = 1
arg format = 2304
arg val = 100
arg error = 0
command = 2433
arg = 100
command_len = 4

line = POP BX
arg  = BX
arg format = 512
arg val = 2
arg error = 0
command = 649
arg = 2
command_len = 3

line = PUSH 1
arg  = 1
arg format = 2304
arg val = 100
arg error = 0
command = 2433
arg = 100
command_len = 4

line = POP CX
arg  = CX
arg format = 512
arg val = 3
arg error = 0
command = 649
arg = 3
command_len = 3

line = 
line = NOPE 75
arg  = 75
arg format = 2304
arg val = 7500
arg error = 0
new size = 255
line = CALL 200 ;FIBONACCI CALCULATION
arg  = 200 ;FIBONACCI CALCULATION
arg format = 2304
arg val = 20000
arg error = 0
command = 2442
arg = 20000
command_len = 4

line = 
line = NOPE 80
arg  = 80
arg format = 2304
arg val = 8000
arg error = 0
new size = 335
line = 
line = 
line = 
line = PUSH 0
arg  = 0
arg format = 2304
arg val = 0
arg error = 0
command = 2433
arg = 0
command_len = 4

line = PUSH 32
arg  = 32
arg format = 2304
arg val = 3200
arg error = 0
command = 2433
arg = 3200
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 104
arg  = 104
arg format = 2304
arg val = 10400
arg error = 0
command = 2433
arg = 10400
command_len = 4

line = PUSH 84
arg  = 84
arg format = 2304
arg val = 8400
arg error = 0
command = 2433
arg = 8400
command_len = 4

line = PUTS
command = 23

line = 
line = PUSH [0]
arg  = [0]
arg format = 1024
arg val = 0
arg error = 0
command = 1153
arg = 0
command_len = 4

line = OUT    
command = 6

line = 
line = PUSH 0
arg  = 0
arg format = 2304
arg val = 0
arg error = 0
command = 2433
arg = 0
command_len = 4

line = PUSH 10
arg  = 10
arg format = 2304
arg val = 1000
arg error = 0
command = 2433
arg = 1000
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 99
arg  = 99
arg format = 2304
arg val = 9900
arg error = 0
command = 2433
arg = 9900
command_len = 4

line = PUSH 110
arg  = 110
arg format = 2304
arg val = 11000
arg error = 0
command = 2433
arg = 11000
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 117
arg  = 117
arg format = 2304
arg val = 11700
arg error = 0
command = 2433
arg = 11700
command_len = 4

line = PUSH 113
arg  = 113
arg format = 2304
arg val = 11300
arg error = 0
command = 2433
arg = 11300
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 115
arg  = 115
arg format = 2304
arg val = 11500
arg error = 0
command = 2433
arg = 11500
command_len = 4

line = PUSH 32
arg  = 32
arg format = 2304
arg val = 3200
arg error = 0
command = 2433
arg = 3200
command_len = 4

line = PUSH 102
arg  = 102
arg format = 2304
arg val = 10200
arg error = 0
command = 2433
arg = 10200
command_len = 4

line = PUSH 111
arg  = 111
arg format = 2304
arg val = 11100
arg error = 0
command = 2433
arg = 11100
command_len = 4

line = PUSH 32
arg  = 32
arg format = 2304
arg val = 3200
arg error = 0
command = 2433
arg = 3200
command_len = 4

line = PUSH 114
arg  = 114
arg format = 2304
arg val = 11400
arg error = 0
command = 2433
arg = 11400
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 98
arg  = 98
arg format = 2304
arg val = 9800
arg error = 0
command = 2433
arg = 9800
command_len = 4

line = PUSH 109
arg  = 109
arg format = 2304
arg val = 10900
arg error = 0
command = 2433
arg = 10900
command_len = 4

line = PUSH 101
arg  = 101
arg format = 2304
arg val = 10100
arg error = 0
command = 2433
arg = 10100
command_len = 4

line = PUSH 109
arg  = 109
arg format = 2304
arg val = 10900
arg error = 0
command = 2433
arg = 10900
command_len = 4

line = PUSH 32
arg  = 32
arg format = 2304
arg val = 3200
arg error = 0
command = 2433
arg = 3200
command_len = 4

line = PUSH 104
arg  = 104
arg format = 2304
arg val = 10400
arg error = 0
command = 2433
arg = 10400
command_len = 4

line = PUSH 116
arg  = 116
arg format = 2304
arg val = 11600
arg error = 0
command = 2433
arg = 11600
command_len = 4

line = PUTS
command = 23

line = 
line = PUSH AX
arg  = AX
arg format = 512
arg val = 1
arg error = 0
command = 641
arg = 1
command_len = 4

line = OUT
command = 6

line = HLT
command = 7

line = 
line = ;FIBONACCI SEQUENCE CALCULATION
line = NOPE 200
arg  = 200
arg format = 2304
arg val = 20000
arg error = 0
new size = 535
line = PUSH CX
arg  = CX
arg format = 512
arg val = 3
arg error = 0
command = 641
arg = 3
command_len = 4

line = PUSH [0]
arg  = [0]
arg format = 1024
arg val = 0
arg error = 0
command = 1153
arg = 0
command_len = 4

line = JNE  225
arg  = 225
arg format = 2304
arg val = 22500
arg error = 0
command = 2451
arg = 22500
command_len = 3

line = RET
command = 20

line = NOPE 225
arg  = 225
arg format = 2304
arg val = 22500
arg error = 0
new size = 760
line = PUSH BX
arg  = BX
arg format = 512
arg val = 2
arg error = 0
command = 641
arg = 2
command_len = 4

line = PUSH AX
arg  = AX
arg format = 512
arg val = 1
arg error = 0
command = 641
arg = 1
command_len = 4

line = ADD
command = 2

line = PUSH BX
arg  = BX
arg format = 512
arg val = 2
arg error = 0
command = 641
arg = 2
command_len = 4

line = POP AX
arg  = AX
arg format = 512
arg val = 1
arg error = 0
command = 649
arg = 1
command_len = 3

line = POP BX
arg  = BX
arg format = 512
arg val = 2
arg error = 0
command = 649
arg = 2
command_len = 3

line = PUSH CX
arg  = CX
arg format = 512
arg val = 3
arg error = 0
command = 641
arg = 3
command_len = 4

line = PUSH 1
arg  = 1
arg format = 2304
arg val = 100
arg error = 0
command = 2433
arg = 100
command_len = 4

line = ADD
command = 2

line = POP CX
arg  = CX
arg format = 512
arg val = 3
arg error = 0
command = 649
arg = 3
command_len = 3

line = CALL 200
arg  = 200
arg format = 2304
arg val = 20000
arg error = 0
command = 2442
arg = 20000
command_len = 4

line = RET
command = 20

line = 
line = 
line = 
Function assembler_error lines_to_bytecode(command_string_processing*) end
